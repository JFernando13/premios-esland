---
import Hero from "~/components/hero/Hero.astro";
import LinkToAction from "~/components/shared/LinkToAction.astro";
import { transformData } from "~/utils/editions";
import Layout from "~/layouts/Layout.astro";

import editions from "~/data/editions.json";
import gallery from "~/data/gallery.json";
import type { EditionInfo } from "~/types/editions";
import Palmares from "~/components/archive-page/palmares/Palmares.astro";
import Gallery from "~/components/archive-page/gallery/Gallery.astro";
import Metrics from "~/components/archive-page/metrics/Metrics.astro";

const edition = 0;
const categorySelected = "Streamer del aÃ±o";

const editionInfo = editions[edition];
const twoFinalists = transformData(
  editions[edition].info.find(
    (info) => info.categoria === categorySelected,
  ) as EditionInfo,
);

let photosByEdition = gallery[edition].slice(0, 10);
---

<Layout
  titlePage="Archivo de las ediciones anteriores"
  description="Premios Esland"
>
  <Hero media="image" src="/file-bg.webp">
    <div class="absolute z-20 gap-8 flex flex-col items-center -translate-y-20">
      <h1
        class="lg:text-6xl text-4xl text-center uppercase font-tomaso tracking-widest"
      >
        Ediciones anteriores
      </h1>

      <LinkToAction
        text="revive la ultima gala"
        class={"px-5 py-3 lg:text-2xl font-medium"}
        href="https://www.youtube.com/watch?v=1YmpPrqKP-g"
      />
    </div>
  </Hero>

  <main class="section flex flex-col gap-24">
    <!--
      TODO: Tabs for each edition
       <section>
        <button>Primera Edicion</button>
        <button>Segunda Edicion</button>
      </section> 
    -->

    <!-- Palmares Section -->
    <Palmares
      twoFinalists={twoFinalists}
      edition={edition}
      editionInfo={editionInfo.info as EditionInfo[]}
    />

    <!-- Galeria Section -->
    <Gallery edition={edition} photosByEdition={photosByEdition} />

    <!-- Metrics Section -->
    <Metrics metrics={editionInfo.metrics} />
  </main>
</Layout>

<script>
  const counters = document.querySelectorAll(
    ".counter",
  ) as NodeListOf<HTMLParagraphElement>;

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          counterProgressive();
          observer.disconnect();
        }
      });
    },
    {
      rootMargin: "10px",
    },
  );

  observer.observe(document.getElementById("metrics")!);

  function counterProgressive() {
    counters.forEach((counter) => {
      const end = parseFloat(counter.textContent ?? "0");
      const decimals = counter.textContent?.split(".")[1]?.length ?? 0;

      let startTime = 0;
      const duration = 1800;
      const start = 0;

      function updateCounter(timestamp: number) {
        if (!startTime) startTime = timestamp;

        const progress = timestamp - startTime;
        const percentage = Math.min(progress / duration, 1);
        const value = (start + percentage * (end - start)).toFixed(decimals);

        counter.innerText = value;

        if (percentage < 1) {
          requestAnimationFrame(updateCounter);
        }
      }

      requestAnimationFrame(updateCounter);
    });
  }
</script>
